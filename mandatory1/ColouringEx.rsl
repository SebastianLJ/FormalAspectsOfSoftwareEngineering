ColouringBasics

scheme ColouringEx =
extend ColouringBasics with 
class
  value
    col : Relation -~-> Colouring
    col(r) is getSolution(getPieceSet(r), {}, r)
    pre isRelation(r),

    getPieceSet : Relation -> Piece-set
    getPieceSet(r) is 
     if r = {} 
       then {} 
     else 
       let (x,y) = hd(r), j=r\{(x,y)} in {x} union {y} union getPieceSet(j) 
         end
     end,

    getSolution : Piece-set >< Colouring >< Relation -> Colouring
    getSolution(pieces,cols, r) is
      if (pieces = {})
      then
        cols
      else
        let 
          piece = hd(pieces),
          col = getValidColour(cols, piece, r)
        in
          getSolution(pieces \ {piece}, cols \ {col} union {col union {piece}}, r)
        end
      end,

    getValidColour : Colouring >< Piece >< Relation -> Colour
    getValidColour(cols, piece, r) is
    /* return empty set to create a new color if no color is made */
    if (cols = {}) 
    then 
      {}
    else
      let col = hd(cols)
      in 
        /* return colour if all pieces in colour are not a neighbour to the piece */
        if(isValidColour(col, piece, r)) then 
          col
        else
          /* keep looking */
          getValidColour(cols \ {col}, piece, r)
        end
      end
    end,

   isValidColour : Colour >< Piece >< Relation -> Bool
   isValidColour(col, piece, r) is
    (all p : Piece :- p isin col =>
      areNb(p, piece, r) = false
    )
end
