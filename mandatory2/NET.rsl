scheme NET =
class
  type /* types  */
    Net = CapacityMap >< ConnectionMap,
    Headway = Time, -- minimum headways
    DrivingTime = Time, -- minimum driving times
    Time = Nat, -- times in number of minutes
    Capacity = Nat, -- capacities
    StopId = Text,  -- names of stops
    CapacityMap = StopId -m-> Capacity, -- capacities of stops
    Connection = (Headway >< DrivingTime >< Capacity),
    ConnectionMap = (StopId >< StopId) -m-> Connection -- connection map with headway and driving time
  value /* generators  */
    --empty :  Net = ([],[]),  -- the empty net
    -- insert a stop with a given name and capacity 
    insertStop : StopId >< Capacity >< Net -> Net
    insertStop(stopId, capacity, (capacityMap, connectionMap)) is
      (capacityMap !! [stopId +> capacity], connectionMap), 
    -- add a connection between given stops, 
    -- with the given minimum headway, capacity and minimum driving time
    addConnection : StopId >< StopId >< Headway >< Capacity >< DrivingTime >< Net -> Net
    addConnection(stopId1, stopId2, headway, capacity, drivingTime, (capacityMap, connectionMap)) is
      (capacityMap ,connectionMap !! [(stopId1, stopId2) +> (headway, drivingTime, capacity)])
  value /* observers (Sebastian and Noah) */
    -- check whether a stop is in a network     
    isIn : StopId >< Net -> Bool
    isIn(stopId, (capacityMap, connecitonMap)) is 
      stopId isin dom(capacityMap),
    -- get the capacity of a stop 
    capacity : StopId >< Net -~-> Capacity
    capacity (stopId,(capacityMap, connectionMap)) is 
      capacityMap(stopId),
    -- check whether two stops are directly connected in a network        
    areDirectlyConnected : StopId >< StopId >< Net -> Bool
    areDirectlyConnected(stopId1, stopId2, (capacityMap, connectionMap)) is
      (stopId1, stopId2) isin dom(connectionMap) \/
      (stopId2, stopId1) isin dom(connectionMap),

    -- (Sebastian and Noah)
    getConnection : StopId >< StopId >< Net -~-> Connection
    getConnection(stop1, stop2, (capacityMap, connectionMap)) is
      if (stop1, stop2) isin dom(connectionMap)
      then
        connectionMap((stop1, stop2))
      else
        connectionMap((stop2, stop1))
      end,

    -- get minimum headway between two connected stops        
    minHeadway : StopId >< StopId >< Net -~-> Headway
    minHeadway(stopId1, stopId2, net) is
      let 
        (headway, drivingTime, capacity) = getConnection(stopId1, stopId2, net)
      in
        headway
      end,

   -- get the capacity for a connection between two connected stops
    capacity : StopId >< StopId >< Net -~-> Capacity
    capacity(stopId1, stopId2, net) is
      let 
        (headway, drivingTime, capacity) = getConnection(stopId1, stopId2, net)
      in
        capacity
      end,
 
    -- get minimum driving time between two connected stops        
    minDrivingTime : StopId >< StopId >< Net -~-> DrivingTime
    minDrivingTime(stopId1, stopId2, net) is
      let 
        (headway, drivingTime, capacity) = getConnection(stopId1, stopId2, net)
      in 
        drivingTime
      end

  value /* predicates to check nets  */
    -- a stop can not connect to itself
    noSelfConnection : Net -> Bool
    noSelfConnection(capacityMap, connectionMap) is
      (all (stopId1, stopId2) : StopId >< StopId 
        :- (stopId1, stopId2) isin dom(connectionMap) =>
        stopId1 ~= stopId2),

    -- all stopIds included in the domain of the ConnectionMap must also be in the domain of the CapacityMap
    allStopsInConnectionMapAreInCapacityMap : Net -> Bool
    allStopsInConnectionMapAreInCapacityMap(capacityMap, connectionMap) is
      (all (stopId1, stopId2) : StopId >< StopId 
        :- (stopId1, stopId2) isin dom(connectionMap) =>
        isIn(stopId1, (capacityMap, connectionMap)) /\ isIn(stopId2, (capacityMap, connectionMap))),

    -- all stops must have a connection to another stop
    allStopsHaveConnection : Net -> Bool
    allStopsHaveConnection(capacityMap, connectionMap) is
      (all stopId : StopId 
        :- stopId isin dom(capacityMap) =>
        (exists stopId2 : StopId 
          :- stopId2 isin dom(capacityMap) /\ 
            (areDirectlyConnected(stopId, stopId2, (capacityMap, connectionMap))))),

    -- check whether a net is valid
    isWellformed : Net -> Bool
    isWellformed(net) is 
      noSelfConnection(net) /\ 
      allStopsInConnectionMapAreInCapacityMap(net) /\ 
      allStopsHaveConnection(net)
end  
