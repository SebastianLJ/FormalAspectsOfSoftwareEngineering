scheme TESTNET =
extend NET with 
class
  value
    /* STOPS */

    /* Stop A */
    StopA : StopId = "A",
    CapacityA : Capacity = 2,

    /* Stop B */
    StopB: StopId = "B",
    CapacityB : Capacity = 6,

    /* Stop C */
    StopC : StopId = "C",
    CapacityC : Capacity = 2,

    /* Stop D */
    StopD: StopId = "D",
    CapacityD : Capacity = 2,

    /* Stop D */
    StopF: StopId = "F",
    CapacityF : Capacity = 2,

    /* Connection */
    /* AB */
    DriveTimeAB : DrivingTime = 10,
    CapacityAB : Capacity = 1,
    HeadwayAB : Headway = 1,  

    /* BC */
    DriveTimeBC : DrivingTime = 12,
    CapacityBC : Capacity = 3,
    HeadwayBC : Headway = 2,

    /* BD */
    DriveTimeBD : DrivingTime = 7,
    CapacityBD : Capacity = 2,
    HeadwayBD : Headway = 2,


    /* ConnectioMap */
    connectionMap : ConnectionMap = [(StopB, StopD) +> (HeadwayBD, DriveTimeBD, CapacityBD), (StopA,StopB) +> (HeadwayAB, DriveTimeAB, CapacityAB), (StopB, StopC) +> (HeadwayBC, DriveTimeBC, CapacityBC)],
    stopCapacity : StopCapacityMap = [StopA +> CapacityA, StopB +> CapacityB, StopC +> CapacityC, StopD +> CapacityD],
      
    connectionMap2 : ConnectionMap = [(StopB, StopD) +> (HeadwayBD, DriveTimeBD, CapacityBD), (StopA,StopB) +> (HeadwayAB, DriveTimeAB, CapacityAB), (StopB, StopC) +> (HeadwayBC, DriveTimeBC, CapacityBC),(StopD, StopF) +> (HeadwayBD, DriveTimeBD, CapacityBD)],
    stopCapacity2 : StopCapacityMap = [StopA +> CapacityA, StopB +> CapacityB, StopC +> CapacityC, StopD +> CapacityD, StopF +> CapacityF],
      
    /* NET */
    Net : Net = (stopCapacity, connectionMap),
    Net2 : Net = (stopCapacity2, connectionMap2),
    NetWithAddedStop : Net = (stopCapacity2, ConnectioMap)

  test_case 
    /* generators  */ 
    /* insertStop (Mads) */       
    [T01] insertStop(StopF, CapacityF, Net) = NetWithAddedStop, -- return true
      
    /* addConnection (Susan)  */

/*  [t05] addConnection(StopA,StopB,HeadwayAB,CapacityAB,DriveTimeAB) = Net
 */
    /* observers */
    /* isIn (Mads) */
    [T02] isIn(StopA, Net), -- true
    [T03] isIn(StopB, Net), -- true
    [T04] isIn("A", Net), -- true
    [T05] isIn("B", Net), -- true
    [T06] isIn("T", Net), -- false
    [T07] isIn("Q", Net), -- false
    [T08] isIn(StopF, insertStop(stopId, 2, Net)), -- true
      
    /* capacity (Mads)  */
    [T09] capacity (StopB, StopD, Net) = 2, -- True
    [T10] capacity (StopA, StopB, Net) = 1, -- True
    [T11] capacity (StopB, StopD, Net) = 3, -- False
    [T12] capacity (StopB, StopC, Net) = 8, -- False

    /* areDirectlyConnect (Mads) */
    [T13] areDirectlyConnect(stopA, stopB, Net), -- True
    [T14] areDirectlyConnect(stopA, StopC, Net), -- False
    [T15] areDirectlyConnect(stopB, stopC, Net) -- True

    /* minHeadWay (Susan) */

    /* capacity (Susan) */

    /* minDrivingTime (Susan) */
  end 

   
 
