ColouringEx

scheme testNet =
  extend NET with 
  class
    value
     /* STOPS */

      /* Stop A */
      StopA : StopId = A,
      DrivingTimeA : DrivingTime = 10,
      HeadwayA : Headway = 1,
      CapacityA : Capacity = 2,

      /* Stop B */
      StopB: StopId = B,
      CapacityB : Capacity = 6,

      /* Stop C */
      StopC : StopId = C,
      DrivingTimeC : DrivingTime = 12,
      HeadwayC : Headway = 2,
      CapacityC : Capacity = 2,

      /* Stop D */
      StopD: StopId = D,
      DrivingTimeD : DrivingTime = 7,
      HeadwayD : Headway = 2,
      CapacityD : Capacity = 2,

      /* Connection */
      /* AB */
      DriveTimeAB : drivingTime = 10,
      CapacityAB : Capacity = 1,
      HeadwayAB : Headway = 1,  

      /* BC */
      DriveTimeBC : drivingTime = 12,
      CapacityBC : Capacity = 3,
      HeadwayBC : Headway = 2,

      /* BD */
      DriveTimeBD : drivingTime = 7,
      CapacityBD : Capacity = 2,
      HeadwayBD : Headway = 2,


      /* ConnectioMap */
      Connections : ConnectionMap = ((StopB, StopD) +> (HeadwayBD >< DriveTimeBD >< CapacityBD), (stopA,StopB) +> (HeadwayAB >< DriveTimeAB >< CapacityAB), (StopB, StopC) +> (HeadwayBC >< DriveTimeBC >< CapacityBC) ) ,
      StopCapacity : StopCapacityMap = (StopA +> CapacityA, StopB +> CapacityB, StopC +> CapacityC, StopD +> CapacityD),

      /* NET */
      Net : Net = (StopCapacity, ConnectioMap)

    test_case 
      /* generators */ 
      /* insertStop */
      [t01]

      [t02]
      
      /* addConnection  */


      /* observers */
      /* isIn */

      /* capacity  */

      /* areDirectlyConnect */

      /* minHeadWay */

      /* capacity */

      /* minDrivingTime */

    end
   
 
