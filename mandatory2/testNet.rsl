NET

scheme testNet =
  extend NET with 
  class
    value
     /* STOPS */

      /* Stop A */
      StopA : StopId = "A",
      CapacityA : Capacity = 2,

      /* Stop B */
      StopB: StopId = "B",
      CapacityB : Capacity = 6,

      /* Stop C */
      StopC : StopId = "C",
      CapacityC : Capacity = 2,

      /* Stop D */
      StopD: StopId = "D",
      CapacityD : Capacity = 2,

      /* Connection */
      /* AB */
      DriveTimeAB : DrivingTime = 10,
      CapacityAB : Capacity = 1,
      HeadwayAB : Headway = 1,  

      /* BC */
      DriveTimeBC : DrivingTime = 12,
      CapacityBC : Capacity = 3,
      HeadwayBC : Headway = 2,

      /* BD */
      DriveTimeBD : DrivingTime = 7,
      CapacityBD : Capacity = 2,
      HeadwayBD : Headway = 2,


      /* ConnectioMap */
      connectionMap : ConnectionMap = [(StopB, StopD) +> (HeadwayBD, DriveTimeBD, CapacityBD), (StopA,StopB) +> (HeadwayAB, DriveTimeAB, CapacityAB), (StopB, StopC) +> (HeadwayBC, DriveTimeBC, CapacityBC)],
      stopCapacity : StopCapacityMap = [StopA +> CapacityA, StopB +> CapacityB, StopC +> CapacityC, StopD +> CapacityD],

      /* NET */
      Net : Net = (stopCapacity, connectionMap)

    test_case 
      /* generators  */ 
      /* insertStop (Mads) */ 
      
      
      /* addConnection (Susan)  */

/*       [t05] addConnection(StopA,StopB,HeadwayAB,CapacityAB,DriveTimeAB) = Net
 */
      /* observers */
      /* isIn (Mads) */

      /* capacity (Mads)  */

      /* areDirectlyConnect (Mads) */

      /* minHeadWay (Susan) */

      /* capacity (Susan) */

      /* minDrivingTime (Susan) */
   end 

   
 
