NET
scheme testNet =
extend NET with 
class
  value
    /* STOPS */

    /* Stop A */
    StopA : StopId = "A",
    CapacityA : Capacity = 2,

    /* Stop B */
    StopB: StopId = "B",
    CapacityB : Capacity = 6,

    /* Stop C */
    StopC : StopId = "C",
    CapacityC : Capacity = 2,

    /* Stop D */
    StopD: StopId = "D",
    CapacityD : Capacity = 2,

    /* Stop D */
    StopF: StopId = "F",
    CapacityF : Capacity = 2,

    /* Connection */
    /* AB */
    DriveTimeAB : DrivingTime = 10,
    CapacityAB : Capacity = 1,
    HeadwayAB : Headway = 1,  

    /* BC */
    DriveTimeBC : DrivingTime = 12,
    CapacityBC : Capacity = 3,
    HeadwayBC : Headway = 2,

    /* BD */
    DriveTimeBD : DrivingTime = 7,
    CapacityBD : Capacity = 2,
    HeadwayBD : Headway = 2,


    /* ConnectioMap */
    connectionMap : ConnectionMap = [(StopB, StopD) +> (HeadwayBD, DriveTimeBD, CapacityBD), (StopA,StopB) +> (HeadwayAB, DriveTimeAB, CapacityAB), (StopB, StopC) +> (HeadwayBC, DriveTimeBC, CapacityBC)],
    stopCapacity : CapacityMap = [StopA +> CapacityA, StopB +> CapacityB, StopC +> CapacityC, StopD +> CapacityD],
      
    connectionMap2 : ConnectionMap = [(StopB, StopD) +> (HeadwayBD, DriveTimeBD, CapacityBD), (StopA,StopB) +> (HeadwayAB, DriveTimeAB, CapacityAB), (StopB, StopC) +> (HeadwayBC, DriveTimeBC, CapacityBC),(StopD, StopF) +> (HeadwayBD, DriveTimeBD, CapacityBD)],
    stopCapacity2 : CapacityMap = [StopA +> CapacityA, StopB +> CapacityB, StopC +> CapacityC, StopD +> CapacityD, StopF +> CapacityF],
     
    connectionMapSelfConnection : ConnectionMap = [(StopB, StopD) +> (HeadwayBD, DriveTimeBD, CapacityBD), (StopA,StopB) +> (HeadwayAB, DriveTimeAB, CapacityAB), (StopB, StopC) +> (HeadwayBC, DriveTimeBC, CapacityBC),(StopD, StopF) +> (HeadwayBD, DriveTimeBD, CapacityBD)],
    
    /* NET */
    Net : Net = (stopCapacity, connectionMap),
    Net2 : Net = (stopCapacity2, connectionMap2),
    NetWithAddedStop : Net = (stopCapacity2, connectionMap),
    NetWithSelfConnect : Net = (stopCapacity, connectionMapSelfConnection)

  test_case 
    /* generators  */ 
    /* insertStop (Mads) */       
    [T_insertStop] insertStop(StopF, CapacityF, Net) = NetWithAddedStop, -- return true
      
    /* addConnection (Susan)  */
    [T_addConnection] addConnection(StopA,StopB,HeadwayAB,CapacityAB,DriveTimeAB,Net) = Net,
    


    /* observers */
    /* isIn (Mads) */
    [T_AisIn] isIn(StopA, Net), -- true
    [T_FisNotIn] isIn(StopF, Net), -- false
    [T_charAisIn] isIn("A", Net), -- true
    [T_charBisIn] isIn("B", Net), -- true
    [T_charTisNotIn] isIn("T", Net), -- false
    [T_charQisNotIn] isIn("Q", Net), -- false
    [T_isInInsertStop] isIn(StopF, insertStop(StopF, 2, Net)), -- true
      
    /* capacity (Mads)  */
    [T_checkCapacityB] capacity (StopB, Net) = 6, -- True
    [T_checkCapacityA] capacity (StopA, Net) = 2, -- True
    [T_checkFalseCapacityB] capacity (StopB, Net) = 3, -- False
    [T_checkFalseCapacityA] capacity (StopA, Net) = 8, -- False

    /* areDirectlyConnect (Mads) */
    [T_checkDirectConnectionAB] areDirectlyConnected(StopA, StopB, Net), -- True
    [T_checkNotExistingDirectConnectionAC] areDirectlyConnected(StopA, StopC, Net), -- False
    [T_checkDirectConnectionBC] areDirectlyConnected(StopB, StopC, Net), -- True


    /* minHeadWay (Susan) */
    [T_ExistingMinimumHeadwayAB]minHeadway(StopA,StopB,Net) = HeadwayAB, --True
    [T_ExistingMinimumHeadwayBC]minHeadway(StopB,StopC,Net) = HeadwayBC, --True
    [T_ExistingMinimumHeadwayBD]minHeadway(StopB,StopD,Net) = HeadwayBD, --True
    [T_NotExistingExistingMinimumHeadwayAB]minHeadway(StopA,StopD,Net) = HeadwayAB, --False
    [T_IsnotPresent_MinimumHeadwayAB]minHeadway(StopA,StopB,Net) ~= HeadwayBD, --True




    /* capacity (Susan) */
    [T_ExistingCapacityAB]capacity(StopA,StopB,Net) = CapacityAB, --true
    [T_ExistingCapacityBC]capacity(StopB,StopC,Net) = CapacityBC, --true
    [T_ExistingCapacityBD]capacity(StopB,StopD,Net) = CapacityBD, --true
    [T_NotExistingCapacityAD]capacity(StopA,StopD,Net) = CapacityBD, --false
    [T_FalseCapacityBD]capacity(StopB,StopD,Net) ~= CapacityAB, --true
    




    /* minDrivingTime (Susan) */
    [T_ExistingMinimumDrivingTimeAB]minDrivingTime(StopA,StopB,Net) = DriveTimeAB, --true
    [T_ExistingMinimumDrivingTimeBC]minDrivingTime(StopB,StopC,Net) = DriveTimeBC, --true
    [T_ExistingMinimumDrivingTimeBD]minDrivingTime(StopB,StopD,Net) = DriveTimeBD, --true
    [T_ExistingMinimumDrivingTimeAF]minDrivingTime(StopA,StopF,Net) = DriveTimeBD, --false
    [T_FalseMinimumDrivingTimeAB]minDrivingTime(StopA,StopB,Net) ~= DriveTimeBD, --true

    

    /* noSelfConnection (Mads ) */
    [T_NotExistingSelfConnection] noSelfConnection(Net), -- true
     [T_ExistingSelfConnection] noSelfConnection(NetWithSelfConnect), -- false
    /* allStopsInConnectionMapAreInCapacityMap (Mads) */
    [T_allStopsInConnectionMapAreInCapacityMap] allStopsInConnectionMapAreInCapacityMap(Net), -- true
    [T_allStopsInConnectionMapAreNotInCapacityMap] allStopsInConnectionMapAreInCapacityMap((stopCapacity2,connectionMap)), -- false
    /* allStopsHaveConnection (Susan) */
    [T_allStopsHaveConnection] allStopsHaveConnection(Net), -- true
    [T_allStopsDoesnotHaveConnection] allStopsHaveConnection(Net2), -- false

    /* isWellformed (Susan)*/
    [T_validNet] isWellformed(Net), -- true
    [T_NotValidNet] isWellformed(Net2), -- false
    [T_NotValidNetCheckinginDifferentWay] isWellformed((stopCapacity2,connectionMap)) -- false

  end 

   
 
