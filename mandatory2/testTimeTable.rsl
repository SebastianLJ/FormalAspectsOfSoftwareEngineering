TIMETABLE

scheme testTimeTable =
    extend TIMETABLE with
    class
        value
            /* ConnectionMap and CapacityMap */
            connectionMap : ConnectionMap = [("B", "D") +> (2, 7, 2), ("A","B") +> (1, 10, 1), ("B", "C") +> (2, 12, 3)],
            stopCapacity : CapacityMap = ["A" +> 2, "B" +> 6, "C" +> 2, "D" +> 2],
            
            /* NET */
            net : Net = (stopCapacity, connectionMap),

            /* PLANS */
            /* Scenario 1 timetable is wellformed */
            plan1 : Plan = <.("A", 0, 1), ("B", 12, 14), ("C", 28, 32), ("B", 46, 48), ("A", 59, 60).>,
            plan2 : Plan = <.("D", 0, 2), ("B", 11, 13), ("A", 28, 32), ("B", 47, 50), ("D", 58, 60).>,
            timetableWF : TimeTable = ["tram1" +> plan1, "tram2" +> plan2],

            /* Scenario 2 a plan in the timetable contains has a driving time faster than the possible time in a plan */
            planInvalidDrivingTime : Plan = <.("D", 0, 2), ("B", 8, 13), ("A", 28, 32), ("B", 47, 50), ("D", 58, 60).>,
            timetableInvalidDrivingTime : TimeTable = ["tram1" +> plan1, "tram2" +> planInvalidDrivingTime],
            
            /* Scenario 3 a plan in the timetable has a stop with a too short depature headway */
            planShortDepartureHeadway : Plan = <.("B", 0, 14), ("C", 30, 60).>,
            timetableInvalidDepartureHeadway : TimeTable = ["tram1" +> plan1, "tram2" +> plan2, "tram3" +> planShortDepartureHeadway],

            /* Scenario 4 two plans in the timetable has an identical planrow going to the same stop */
            planDuplicateDepartureHeadway : Plan = <.("A", 0, 1), ("B", 14, 16).>,
            timetableDuplicateDepartureHeadway : TimeTable = ["tram1" +> plan1, "tram2" +> plan2, "tram3" +> planDuplicateDepartureHeadway],

            /* Scenario 5 a plan in the timetable has a stop with a too short arrival headway */
            planTooShortArrivalTime : Plan = <.("C", 0, 2), ("B", 46, 48).>,
            timetableInvalidArrivalHeadway : TimeTable = ["tram1" +> plan1, "tram2" +> plan2, "tram3" +> planTooShortArrivalTime],

            /* Scenario 6 a tram does not stop a all stops in its plan */
            planWithoutStopTime : Plan = <.("A", 0, 1), ("B", 12, 12), ("C", 28, 32), ("B", 46, 48), ("A", 59, 60).>,
            timetableWithoutStopTime : TimeTable = ["tram1" +> planWithoutStopTime],

            /* Scenario 7 number of trams on a track at any time must not exceed capacity of track */
            plan3 : Plan = <.("C", 5, 7), ("B", 19, 21), ("A", 32, 34), ("B", 46, 48), ("A", 60, 3).>,
           -- plan4 : Plan = <.("B", 28, 32), ("A", 48, 50).>,
            timetableWithExceededTrackCapacities : TimeTable = ["tram1" +> plan1, "tram2" +> plan2, "tram3" +> plan3],
           -- timetable2WithExceededTrackCapacities : TimeTable = ["tram1" +> plan1, "tram2" +> plan2, "tram4" +>plan4]
            
           /* Scenario 8 */
           plan5 : Plan = <.("C", 5, 7), ("B", 19, 21), ("A", 31, 33), ("B", 46, 48), ("A", 60, 3).>,
           plan6 : Plan = <.("B", 15, 17), ("A", 29, 30), ("B", 46, 48), ("A", 60, 3).>,
           timeTableWithExceededStopCapacities : TimeTable = ["tram1" +> plan1, "tram2" +> plan2, "tram3" +> plan5, "tram4" +> plan6],

           /* Scenario 9 */
           plan7 : Plan = <.("C", 5, 7), ("B", 19, 21), ("Q", 31, 33).>,
           timeTableWithInvalidStop : TimeTable = ["tram1" +> plan1, "tram2" +> plan7],

           /* Scenario 10 */
           plan9: Plan = <.("A", 0, 1), ("B", 12, 14), ("C", 28, 32), ("A", 59, 60).>,
           timeTableWithInvalidConnection : TimeTable = ["tram1" +> plan1, "tram2" +> plan9],

           /* Scenario 11 adding a tram to the time table  with an empty table*/
           plan11 : Plan = <..>,
           timetableWithAddedTram : TimeTable = ["tram1" +> plan1, "tram2" +> plan2, tramNotIn +> plan11],

            /* Scenario 12 adding a stop to the net*/
            plan8 : Plan = <.("A", 0, 1), ("B", 12, 14), ("C", 28, 32), ("B", 46, 48), ("A", 59, 60), ("G", 5, 10).>,
            plan9 : Plan = <.("D", 0, 2), ("B", 11, 13), ("A", 28, 32), ("B", 47, 50), ("D", 58, 60).>,
            timetableWithAddedStop : TimeTable = ["tram1" +> plan8, "tram2" +> plan2]
           

        test_case
            -- Scenario 1 (Sebastian)
            [s1_WellFormedTimetable] isWellformed(timetableWF, net) = true,
            -- Scenario 2 (Sebastian)
            [s2_validDrivingTime] timeBetweenStopsIsDrivingTime(plan1, net) = true,
            [s2_InvalidDrivingTime] timeBetweenStopsIsDrivingTime(planInvalidDrivingTime, net) = false,
            [s2_NotWellFormedWithInvalidDrivingTime] isWellformed(timetableInvalidDrivingTime, net) = false,
            -- Scenario 3 (Sebastian)
            [s3_validHeadwayBetweenDeparture] timeBetweenDeparturesIsValidHeadway(timetableWF, net) = true,
            [s3_invalidHeadwayBetweenDeparture] timeBetweenDeparturesIsValidHeadway(timetableInvalidDepartureHeadway, net) = false,
            [s3_NotWellFormedDepatureHeadway] isWellformed(timetableInvalidDepartureHeadway, net) = false,
            -- Scenario 4 (Sebastian)
            [s4_duplicateHeadwayBetweenDeparture] timeBetweenDeparturesIsValidHeadway(timetableDuplicateDepartureHeadway, net) = false,
            [s4_NotWellFormedDuplicateDepatureHeadway] isWellformed(timetableDuplicateDepartureHeadway, net) = false,
            -- Scenario 5 (Sebastian)
            [s5_validHeadwayBetweenArrivals] timeBetweenArrivalIsValidHeadway(timetableWF, net) = true,
            [s5_invalidHeadwayBetweenArrivals] timeBetweenArrivalIsValidHeadway(timetableInvalidArrivalHeadway, net) = false,
            [s5_NotWellFormedArrivalHeadway] isWellformed(timetableInvalidArrivalHeadway, net) = false,
            -- Scenario 6 (Sebastian)
            [s6_tramStopsAtAllStopsItPasses] tramStopsAtAllStopsItPasses(timetableWF) = true,
            [s6_tramDoesNotStopAtAllStopsItPasses] tramStopsAtAllStopsItPasses(timetableWithoutStopTime) = false,
            [s6_NotWellFormedTramDoesNotStopAtAllStopsItPasses] isWellformed(timetableWithoutStopTime, net) = false,
            --Scenario 7 (Noah)
            [s7_NumberOfTrainsOnTrackDontExceedTrackCapacity] allTrackCapacitiesAreNotExceeded(timetableWF, net) = true,
            [s7_NumberOfTrainsOnTrackDoExceedTrackCapacity] allTrackCapacitiesAreNotExceeded(timetableWithExceededTrackCapacities, net) = false,
            --Scenario 8 (Noah)
            [s8_NumberOfTrainsAtStopDontExceedStopCapacity] allStopCapacitiesAreNotExceeded(timetableWF, net) = true,
            [s8_NumberOfTrainsAtStopDoExceedStopCapacity] allStopCapacitiesAreNotExceeded(timeTableWithExceededStopCapacities, net) = false,
            -- Scenario 9 (Noah)
            [s9_AllStopsInPlansExist] allStopsInPlanExist(timetableWF, net) = true,
            [s9_AllStopsInPlansDoNotExist] allStopsInPlanExist(timeTableWithInvalidStop, net) = false,
            -- Scenario 10 (Noah)
            [s10_allStopsAreConnected] allStopsAreConnected(timetableWF, net) = true,
            [s10_allStopsAreNotConnected] allStopsAreConnected(timeTableWithInvalidConnection, net) = false,           
             -- Scenario 11 (Mads) --
            [s12_AddingTram] addTram (tramNotIn, timetableWF) = timetableWithAddedTram,
            -- Scenario 12 (Mads) --
            [s12_addStop] addStop (tramIdA, "G", 5, 10, timetableWF ) = timetableWithAddedStop,
            -- Scenario 13  (Mads) --
            [s13_isinExisting01]isIn(tram1, timetableWF) = true,
            [s13_isinExisting02]isIn(tram2, timetableWF) = true,
            [s13_isNotin]isIn(tramNotIn, timetableWF) = false,
            -- Scenario 14 (Susan) --
            [s14_allStopsInPlanExist] allStopsInPlanExist(timetableWF, net) = true,
            [s14_notAllStopsInPlanExist] allStopsInPlanExist(timetableWF, netWithAddedStop) = false,
            -- Scenario 15 (Susan) --
            [s15_stopsExist] stopsExist(plan1, stopCapacity) = true,
            [s15_stopsDoNotExist] stopsExist(plan2, stopCapacitywithAddedStop) = false


end
