NET
scheme TIMETABLE = extend NET with
class
  type 
    TimeTable = TramId -m-> Plan, -- time tables
    TramId = Text, -- tram names,
    PlanRow = StopId >< ArrivalT >< DepatureT,
    TramPlanRow = TramId >< StopId >< ArrivalT >< DepatureT,
    Plan = PlanRow-list,

    ArrivalT = Time, 
    DepatureT = Time

    value /* generators */
      -- the empty timetable
      empty : TimeTable = [],

      -- add to a time table an empty plan for a new tram
      addTram : TramId >< TimeTable -> TimeTable
      addTram(tramid, timetable) is 
        timetable !! [tramid +> <..>],

      -- add a stop with arrival time and departure time to the plan for a given tram
      addStop : TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
      addStop(tramid, stopid, arrival, departure, timetable) is
        timetable !! [tramid +> timetable(tramid) ^ <.(stopid, arrival, departure).>]

      -- Max capacity for a giving stop
   /*    findMaxCapacity : Time-list >< Time-list -> Int
      findMaxCapacity(arrivals, departures) is 
        len(arrs)
      pre len(arrs) = len(deps)
 */
  value /* observers */
    -- check whether a tram with a given name exists in a given time table
    isIn : TramId >< TimeTable -> Bool
    isIn(tramid, timetable) is
      tramid isin dom(timetable),

      nextStop : PlanRow >< Plan -~-> PlanRow
      nextStop(planRow, plan) is
        let
          iPlanRow = hd plan
        in
          if iPlanRow = planRow
          then 
            let 
              (sid, arrt, dept) = hd (tl plan)
            in 
              (sid, arrt, dept)
            end
          else
            if len(tl plan) > 1
            then
              nextStop(planRow, tl plan)
            else
              let 
                (sid, arrt, dept) = iPlanRow
              in 
                iPlanRow
              end
            end
          end
        end
        pre len plan > 1,

      getConnection : StopId >< StopId >< Net -~-> Connection
      getConnection(stop1, stop2, (capacityMap, connectionMap)) is
      if (stop1, stop2) isin dom(connectionMap)
      then
        connectionMap((stop1, stop2))
      else
        connectionMap((stop2, stop1))
      end,
    -- you can add more observers here
    getAllDepaturesUsingConnection : StopId >< StopId >< TimeTable -> TramPlanRow-set
    getAllDepaturesUsingConnection(stopid1, stopid2, timetable) is
      let
        allTrams = dom timetable
      in
        buildAllDeparturesUsingConnection(stopid1, stopid2, allTrams, timetable)
      end,

    buildAllDeparturesUsingConnection : StopId >< StopId >< TramId-set >< TimeTable -> TramPlanRow-set
    buildAllDeparturesUsingConnection(stopid1, stopid2, trams, timetable) is
      if trams = {}
      then {}
      else
        let
          tram = hd trams
        in
          {findDepartureRowInPlan(stopid1, stopid2, timetable(tram), tram)} union buildAllDeparturesUsingConnection(stopid1, stopid2, trams \ {tram}, timetable)
        end
      end,

    findDepartureRowInPlan : StopId >< StopId >< Plan >< TramId -~-> TramPlanRow
    findDepartureRowInPlan(stopid1, stopid2, plan, tram) is
      let
        (hStopId, hArrTime, hDepTime) = hd plan,
        (nStopId, nArrTime, nDepTime) = nextStop(hd plan, plan)
      in
        if hStopId = stopid1 /\ nStopId = stopid2
        then
          (tram, hStopId, hArrTime, hDepTime)
        else
          if len tl plan > 1
          then
            findDepartureRowInPlan(stopid1, stopid2, tl plan, tram)
          else
            ("", "", 0, 0)
          end
        end
      end
      pre len plan > 1,

    getAllArrivalsUsingConnection : StopId >< StopId >< TimeTable -> PlanRow-set
    getAllArrivalsUsingConnection(stopid1, stopid2, timetable) is
      let
        allPlans = rng(timetable)
      in
        buildAllArrivalsUsingConnection(stopid1, stopid2, allPlans)
      end,

    buildAllArrivalsUsingConnection : StopId >< StopId >< Plan-set -> PlanRow-set
    buildAllArrivalsUsingConnection(stopid1, stopid2, plans) is
      if plans = {}
      then {}
      else
        let
          plan = hd plans
        in
          {findArrivalRowInPlan(stopid1, stopid2, plan)} union buildAllArrivalsUsingConnection(stopid1, stopid2, plans \ {plan})
        end
      end,

    findArrivalRowInPlan : StopId >< StopId >< Plan -~-> PlanRow
    findArrivalRowInPlan(stopid1, stopid2, plan) is
      let
        (hStopId, hArrTime, hDepTime) = hd plan,
        (nStopId, nArrTime, nDepTime) = nextStop(hd plan, plan)
      in
        if hStopId = stopid1 /\ nStopId = stopid2
        then
          (nStopId, nArrTime, nDepTime)
        else
          if len tl plan > 1
          then
            findArrivalRowInPlan(stopid1, stopid2, tl plan)
          else
            ("", 0, 0)
          end
        end
      end
      pre len plan > 1
 
  value /* predicates to check time tables */   


    -- every tram must have exactly one plan
    --  holds implicitly because TimeTable is mapping TramIds

    -- the travel times between each stop must be greater than or equal to the driving time
    timeBetweenStopsIsDrivingTime : Plan >< Net -~-> Bool
    timeBetweenStopsIsDrivingTime(plan, (capacityMap, connectionMap)) is
      if len plan > 1 then
        let
          (stopid1, arrTime1, depTime1) = hd plan,
          (stopid2, arrTime2, depTime2) = hd (tl plan)
        in
          let 
            (headway,drivingTime, capacity) = getConnection(stopid1, stopid2, (capacityMap, connectionMap))
          in
            (arrTime2 - depTime1 >= drivingTime) /\ timeBetweenStopsIsDrivingTime(tl plan, (capacityMap, connectionMap))
          end
        end
      else
        true
      end,

    -- the difference in departure times for any two trams moving on the same track must be greater than or equal to the headway time
    timeBetweenDeparturesIsValidHeadway : TimeTable >< Net -> Bool
    timeBetweenDeparturesIsValidHeadway(timetable, (capacityMap, connectionMap)) is
      (all (stopid1, stopid2) : StopId >< StopId :- (stopid1, stopid2) isin dom(connectionMap) =>
        let (headway,drivingTime, capacity) = connectionMap((stopid1, stopid2))
        in
          (all (tram1, sid1, arrt1, dept1) : TramPlanRow :- (tram1, sid1, arrt1, dept1) isin getAllDepaturesUsingConnection(stopid1, stopid2, timetable) =>
            (all (tram2, sid2, arrt2, dept2) : TramPlanRow :- (tram2, sid2, arrt2, dept2) isin getAllDepaturesUsingConnection(stopid1, stopid2, timetable) \ {(tram1, sid1, arrt1, dept1)} =>
              (abs(dept1 - dept2) >= headway))
          )
        end
      ),
        

    -- the difference in arrival times for any two trams moving on the same track must be greater than or equal to the headway time
    -- a tram must stop at any stop it visits
    tramStopsAtAllStopsItPasses : TimeTable -> Bool
    tramStopsAtAllStopsItPasses(timetable) is
      (all tramid : TramId :- tramid isin dom(timetable) =>
        (all (stopid, arrTime, depTime) : PlanRow :- (stopid, arrTime, depTime) isin timetable(tramid) =>
          depTime - arrTime >= 1
        )
      ),

     -- the number of trains stopped at a stop must not exceed the capacity of the stop
/*      StopCapacityIsNotExceeded : Plan >< Net -> Bool
     StopCapacityIsNotExceeded(plan, net) is (all stopId : StopId :- stopId isin dom(planRow) =>
        let
           arrivals = ArrivalT,
           departures = DepartureT(plan(planRow(stopId)))
        in
           findMaxCapacity(arrivals, departures) <= capacity(stopId, net)
        end
      ),
 */
     -- the number of trains on a track must not exceed the capacity of the track
   /*    TrackCapacityIsNotExceeded : TimeTable >< Net -> Bool
      TrackCapacityIsNotExceeded((capacitymap, connectionmap), net) is 
        (all (stopid1, stopid2) : StopId >< StopId :- (stopid1, stopid2) isin dom(connectionmap) =>
          let
            (headway,drivingTime, capacity) = connectionmap((stopid1, stopid2)),
            dpt_times_dir1 = getAllDepartureTimesForTrack(stopid1, stopid2, timetable),
            arr_times_dir2 = getAllArrivalTimesForTrack(stopid2, stopid1, timetable),
           -- arr_times_dir1 = getAllArrivalTimesForTrack(stopid1, stopid2, timetable),
           -- dpt_times_dir2 = getAllDepartureTimesForTrack(stopid2, stopid1, timetable),

          in
          end */
         --   )
      
    -- the number of trains on a track must not exceed the capacity of the track
   --  TrackCapacityIsNotExceeded : StopId >< StopId >< TimeTable >< Net -> Bool
    -- TrackCapacityIsNotExceeded(stopid1 ,stopid2, timetable, (capacityMap, connectionMap)) is
     --   let
       --   times = buildAllTimesForTrack(stopid1, stopid2, dom(timetable) ,timetable)
       -- in
        --  all((tramid, deptime, arrtime): TramId >< Time >< Time :- (tramid, deptime, arrtime) isin times =>
            
         -- )


          
      buildAllTimesForTrack : StopId >< StopId >< TramId-set >< TimeTable -> (TramId>< Time><Time)-set
      buildAllTimesForTrack(stopid1, stopid2, trams, timetable) is 
        if trams = {}
        then {}
        else
          let
            tramid = hd trams
          in
            buildTimesForTramOnTrack(stopid1, stopid2, timetable(tramid), tramid) union buildAllTimesForTrack(stopid1, stopid2, trams \ {tramid}, timetable)
          end
        end,

    

       buildTimesForTramOnTrack : StopId >< StopId >< Plan >< TramId -> (TramId ><Time><Time)-set
       buildTimesForTramOnTrack (stopid1, stopid2, plan, tramid) is 
          if plan = <..>
          then {}
          else
            let
              (sid, arrt, dept) = hd plan,
              (sid2, arrt2, dept2) = nextStop((sid,arrt,dept), plan)
            in
              if sid = stopid1 /\ sid2 = stopid2
              then {(tramid, dept, arrt2)} union buildTimesForTramOnTrack(stopid1, stopid2, tl plan, tramid)
              else buildTimesForTramOnTrack(stopid1, stopid2, tl plan, tramid)
              end
            end
          end,



     isWellformed : TimeTable >< Net -~-> Bool
     isWellformed(t, n) is
       tramStopsAtAllStopsItPasses(t) /\ timeBetweenDeparturesIsValidHeadway(t, n) /\
       (all plan : Plan :- plan isin rng(t) => timeBetweenStopsIsDrivingTime(plan, n))
 
     
end  
