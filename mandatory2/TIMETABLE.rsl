NET
scheme TIMETABLE = extend NET with
class
  type /* types (Sebastian and Noah) */
    TimeTable = TramId -m-> Plan, -- time tables
    TramId = Text, -- tram names,
    PlanRow = StopId >< Time >< Time,
    TramPlanRow = TramId >< StopId >< Time >< Time,
    Plan = PlanRow-list


    value /* generators (Noah and Sebastian) */
      -- the empty timetable
      empty : TimeTable = [],

      -- add to a time table an empty plan for a new tram
      addTram : TramId >< TimeTable -> TimeTable
      addTram(tramid, timetable) is 
        timetable !! [tramid +> <..>],

      -- add a stop with arrival time and departure time to the plan for a given tram
      addStop : TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
      addStop(tramid, stopid, arrival, departure, timetable) is
        timetable !! [tramid +> timetable(tramid) ^ <.(stopid, arrival, departure).>]

  value /* observers */

    -- check whether a tram with a given name exists in a given time table
    -- (Sebastian)
    isIn : TramId >< TimeTable -> Bool
    isIn(tramid, timetable) is
      tramid isin dom(timetable),

    -- (Sebastian)
    -- gets the next stop/row in a plan for a given tram
      nextStop : PlanRow >< Plan -~-> PlanRow
      nextStop(planRow, plan) is
        let
          iPlanRow = hd plan
        in
          if iPlanRow = planRow
          then 
            let 
              (sid, arrt, dept) = hd (tl plan)
            in 
              (sid, arrt, dept)
            end
          else
            if len(tl plan) > 1
            then
              nextStop(planRow, tl plan)
            else
              let 
                (sid, arrt, dept) = iPlanRow
              in 
                iPlanRow
              end
            end
          end
        end
        pre len plan > 1,

    -- (Sebastian and Noah)
      getConnection : StopId >< StopId >< Net -~-> Connection
      getConnection(stop1, stop2, (capacityMap, connectionMap)) is
      if (stop1, stop2) isin dom(connectionMap)
      then
        connectionMap((stop1, stop2))
      else
        connectionMap((stop2, stop1))
      end,
    -- you can add more observers here

    -- (Sebastian)
    getAllDepaturesUsingConnection : StopId >< StopId >< TimeTable -> TramPlanRow-set
    getAllDepaturesUsingConnection(stopid1, stopid2, timetable) is
      let
        allTrams = dom timetable
      in
        buildAllDeparturesUsingConnection(stopid1, stopid2, allTrams, timetable)
      end,

    -- (Sebastian)
    buildAllDeparturesUsingConnection : StopId >< StopId >< TramId-set >< TimeTable -> TramPlanRow-set
    buildAllDeparturesUsingConnection(stopid1, stopid2, trams, timetable) is
      if trams = {}
      then {}
      else
        let
          tram = hd trams
        in
          {findDepartureRowInPlan(stopid1, stopid2, timetable(tram), tram)} union buildAllDeparturesUsingConnection(stopid1, stopid2, trams \ {tram}, timetable)
        end
      end,

    -- (Sebastian)
    findDepartureRowInPlan : StopId >< StopId >< Plan >< TramId -~-> TramPlanRow
    findDepartureRowInPlan(stopid1, stopid2, plan, tram) is
      let
        (hStopId, hArrTime, hDepTime) = hd plan,
        (nStopId, nArrTime, nDepTime) = nextStop(hd plan, plan)
      in
        if hStopId = stopid1 /\ nStopId = stopid2
        then
          (tram, hStopId, hArrTime, hDepTime)
        else
          if len tl plan > 1
          then
            findDepartureRowInPlan(stopid1, stopid2, tl plan, tram)
          else
            ("", "", 0, 0)
          end
        end
      end
      pre len plan > 1,

    -- (Sebastian)
    getAllArrivalsUsingConnection : StopId >< StopId >< TimeTable -> TramPlanRow-set
    getAllArrivalsUsingConnection(stopid1, stopid2, timetable) is
      let
        allTrams = dom timetable
      in
        buildAllArrivalsUsingConnection(stopid1, stopid2, allTrams, timetable)
      end,

    -- (Sebastian)
    buildAllArrivalsUsingConnection : StopId >< StopId >< TramId-set >< TimeTable -> TramPlanRow-set
    buildAllArrivalsUsingConnection(stopid1, stopid2, trams, timetable) is
      if trams = {}
      then {}
      else
        let
          tram = hd trams
        in
          {findArrivalRowInPlan(stopid1, stopid2, timetable(tram), tram)} union buildAllArrivalsUsingConnection(stopid1, stopid2, trams \ {tram}, timetable)
        end
      end,

    -- (Sebastian)
    findArrivalRowInPlan : StopId >< StopId >< Plan >< TramId -~-> TramPlanRow
    findArrivalRowInPlan(stopid1, stopid2, plan, tram) is
      let
        (hStopId, hArrTime, hDepTime) = hd plan,
        (nStopId, nArrTime, nDepTime) = nextStop(hd plan, plan)
      in
        if hStopId = stopid1 /\ nStopId = stopid2
        then
          (tram, nStopId, nArrTime, nDepTime)
        else
          if len tl plan > 1
          then
            findArrivalRowInPlan(stopid1, stopid2, tl plan, tram)
          else
            ("", "", 0, 0)
          end
        end
      end
      pre len plan > 1

 
  value /* predicates to check time tables */   


    -- every tram must have exactly one plan
    --  holds implicitly because TimeTable is mapping TramIds

    -- the travel times between each stop must be greater than or equal to the driving time
    -- (Sebastian)
    timeBetweenStopsIsDrivingTime : Plan >< Net -~-> Bool
    timeBetweenStopsIsDrivingTime(plan, (capacityMap, connectionMap)) is
      if len plan > 1 then
        let
          (stopid1, arrTime1, depTime1) = hd plan,
          (stopid2, arrTime2, depTime2) = hd (tl plan)
        in
          let 
            (headway,drivingTime, capacity) = getConnection(stopid1, stopid2, (capacityMap, connectionMap))
          in
            (arrTime2 - depTime1 >= drivingTime) /\ timeBetweenStopsIsDrivingTime(tl plan, (capacityMap, connectionMap))
          end
        end
      else
        true
      end,

    -- the difference in departure times for any two trams moving on the same track must be greater than or equal to the headway time
    -- (Sebastian and Noah)
    timeBetweenDeparturesIsValidHeadway : TimeTable >< Net -> Bool
    timeBetweenDeparturesIsValidHeadway(timetable, (capacityMap, connectionMap)) is
      (all (stopid1, stopid2) : StopId >< StopId :- (stopid1, stopid2) isin dom(connectionMap) =>
        let (headway,drivingTime, capacity) = connectionMap((stopid1, stopid2))
        in
          (all (tram1, sid1, arrt1, dept1) : TramPlanRow :- (tram1, sid1, arrt1, dept1) isin getAllDepaturesUsingConnection(stopid1, stopid2, timetable) =>
            (all (tram2, sid2, arrt2, dept2) : TramPlanRow :- (tram2, sid2, arrt2, dept2) isin getAllDepaturesUsingConnection(stopid1, stopid2, timetable) \ {(tram1, sid1, arrt1, dept1)} =>
              (abs(dept1 - dept2) >= headway))
          )
        end
      ),

      
        

    -- the difference in arrival times for any two trams moving on the same track must be greater than or equal to the headway time
    timeBetweenArrivalIsValidHeadway : TimeTable >< Net -> Bool
    timeBetweenArrivalIsValidHeadway(timetable, (capacityMap, connectionMap)) is
      (all (stopid1, stopid2) : StopId >< StopId :- (stopid1, stopid2) isin dom(connectionMap) =>
        let (headway,drivingTime, capacity) = connectionMap((stopid1, stopid2))
        in
          (all (tram1, sid1, arrt1, dept1) : TramPlanRow :- (tram1, sid1, arrt1, dept1) isin getAllArrivalsUsingConnection(stopid1, stopid2, timetable) =>
            (all (tram2, sid2, arrt2, dept2) : TramPlanRow :- (tram2, sid2, arrt2, dept2) isin getAllArrivalsUsingConnection(stopid1, stopid2, timetable) \ {(tram1, sid1, arrt1, dept1)} =>
              (abs(dept1 - dept2) >= headway))
          )
        end
      ),
    -- a tram must stop at any stop it visits
    -- (Sebastian and Noah)
    tramStopsAtAllStopsItPasses : TimeTable -> Bool
    tramStopsAtAllStopsItPasses(timetable) is
      (all tramid : TramId :- tramid isin dom(timetable) =>
        (all (stopid, arrTime, depTime) : PlanRow :- (stopid, arrTime, depTime) isin timetable(tramid) =>
          depTime - arrTime >= 1
        )
      ),

  
  -- for all connections check track capacity is not exceeded
  -- (Noah)
    allTrackCapacitiesAreNotExceeded : TimeTable >< Net -> Bool
    allTrackCapacitiesAreNotExceeded(timetable, (capacityMap,connectionMap)) is
      (all (stopid1, stopid2) : StopId >< StopId :- (stopid1, stopid2) isin dom(connectionMap) =>
       trackCapacityIsNotExceeded(stopid1, stopid2, timetable, connectionMap)
      ),
      
   -- the number of trains on a track must not exceed the capacity of the track
    -- (Noah)
    trackCapacityIsNotExceeded : StopId >< StopId >< TimeTable >< ConnectionMap -> Bool
    trackCapacityIsNotExceeded(stopid1 ,stopid2, timetable, connectionMap) is
       let
         times1 = buildAllTimesForTrack(stopid1, stopid2, dom(timetable), timetable),
         times2 = buildAllTimesForTrack(stopid2, stopid1, dom(timetable), timetable),
         (headway, drivingtime, trackcapacity) = connectionMap(stopid1, stopid2)          
       in
         (all (tramid, deptime, arrtime) : TramId >< Time >< Time :- (tramid, deptime, arrtime) isin times1 =>
               (1 +countOverLappingTimesForTrack(tramid, deptime, arrtime, times1) <= trackcapacity)
         ) /\ (all (tramid, deptime, arrtime) : TramId >< Time >< Time :- (tramid, deptime, arrtime) isin times2 =>
              (1 + countOverLappingTimesForTrack(tramid, deptime, arrtime, times2) <= trackcapacity)
         )
       end,
    
    -- count the number of times that overlap with the given time
    -- (Noah)
      countOverLappingTimesForTrack : TramId >< Time >< Time >< (TramId >< Time >< Time)-set -> Nat
      countOverLappingTimesForTrack(tramid,deptime, arrtime, times) is
        if times = {}
        then 0
        else
          let
            (tramid2, deptime2, arrtime2) = hd times
          in
            if tramid ~= tramid2 /\ ((deptime <= deptime2 /\ deptime2<= arrtime) \/ (deptime <= arrtime2 /\ arrtime2 <= arrtime))
            then 1 + countOverLappingTimesForTrack(tramid,deptime, arrtime, times \ {(tramid2, deptime2, arrtime2)})
            else countOverLappingTimesForTrack(tramid, deptime, arrtime, times \ {(tramid2, deptime2, arrtime2)})
            end
          end
        end,
      
    -- build a set of all departure and arrival times for a given track   
    -- (Noah)  
      buildAllTimesForTrack : StopId >< StopId >< TramId-set >< TimeTable -> (TramId >< Time><Time)-set
      buildAllTimesForTrack(stopid1, stopid2, trams, timetable) is 
        if trams = {}
        then {}
        else
          let
            tramid = hd trams
          in
            buildTimesForTramOnTrack(stopid1, stopid2, timetable(tramid), tramid) union buildAllTimesForTrack(stopid1, stopid2, trams \ {tramid}, timetable)
          end
        end,

    
    -- build a set of all departure and arrival times for a given tram on a given track
    -- (Noah)
      buildTimesForTramOnTrack : StopId >< StopId >< Plan >< TramId -> (TramId ><Time><Time)-set
      buildTimesForTramOnTrack (stopid1, stopid2, plan, tramid) is 
        if len plan <= 1
        then {}
        else
          let
            (sid, arrt, dept) = hd plan,
            (sid2, arrt2, dept2) = nextStop((sid,arrt,dept), plan)
          in
            if sid = stopid1 /\ sid2 = stopid2
            then {(tramid, dept, arrt2)} union buildTimesForTramOnTrack(stopid1, stopid2, tl plan, tramid)
            else buildTimesForTramOnTrack(stopid1, stopid2, tl plan, tramid)
            end
          end
        end,
    
    -- for all stops check that the capacity is not exceeded    
    -- (Noah)
      allStopCapacitiesAreNotExceeded : TimeTable >< Net -> Bool
      allStopCapacitiesAreNotExceeded(timetable, (capacityMap,connectionMap)) is
        (all stopid : StopId :- stopid isin dom(capacityMap) =>
          stopCapacityIsNotExceeded(stopid, timetable, capacityMap)
        ),  
    
    -- the number of trains at a stop must not exceed the capacity of the stop
    -- (Noah)
      stopCapacityIsNotExceeded : StopId >< TimeTable >< CapacityMap -> Bool
      stopCapacityIsNotExceeded(stopid, timetable, capacityMap) is
        let 
          times = buildAllTimesForStop(stopid, dom(timetable), timetable),
          capacity = capacityMap(stopid)
        in
          (all (tramid, arrtime, deptime) : TramId >< Time >< Time :- (tramid, arrtime, deptime) isin times =>
            (1 + countOverLappingTimesForStop(tramid, arrtime, deptime, times) <= capacity)
          )
        end,

    -- count the number of arrival and departure times that overlap with the given arrival and departure time
    -- (Noah)
      countOverLappingTimesForStop : TramId >< Time >< Time >< (TramId >< Time >< Time)-set -> Nat
      countOverLappingTimesForStop(tramid,arrtime, deptime, times) is
        if times = {}
        then 0
        else
          let
            (tramid2, arrtime2, deptime2) = hd times
          in
            if tramid ~= tramid2 /\ ((arrtime <= arrtime2 /\ arrtime2<= deptime) \/ (arrtime <= deptime2 /\ deptime2 <= deptime))
            then 1 + countOverLappingTimesForStop(tramid,arrtime, deptime, times \ {(tramid2, arrtime2, deptime2)})
            else countOverLappingTimesForStop(tramid, arrtime, deptime, times \ {(tramid2, arrtime2, deptime2)})
            end
          end
        end,
      
    -- build a set of all arrival and departure times for a given stop
    -- (Noah)
      buildAllTimesForStop : StopId >< TramId-set >< TimeTable -> (TramId >< Time><Time)-set
      buildAllTimesForStop(stopid, trams, timetable) is 
        if trams = {}
        then {}
        else
          let
            tramid = hd trams
          in
            buildTimesForTramOnStop(stopid, timetable(tramid), tramid) union buildAllTimesForStop(stopid, trams \ {tramid}, timetable)
          end
        end,

    -- build a set of all arrival and departure times for a given tram on a given stop
    -- (Noah)
      buildTimesForTramOnStop: StopId >< Plan >< TramId -> (TramId >< Time >< Time)-set
      buildTimesForTramOnStop(stopid, plan, tramid) is
        if len plan < 1
        then {}
        else
          let
            (sid, arrt, dept) = hd plan
          in
            if sid = stopid
            then {(tramid, arrt, dept)} union buildTimesForTramOnStop(stopid, tl plan, tramid)
            else buildTimesForTramOnStop(stopid, tl plan, tramid)
            end
          end
        end,
    
    -- any two consecutive stops in every plan must be connected
    -- (Noah)
      allStopsAreConnected : TimeTable >< Net -> Bool
      allStopsAreConnected(timetable, (capacityMap,connectionMap)) is
        (all tramid : TramId :- tramid isin dom(timetable) =>
          stopsAreConnected(timetable(tramid), connectionMap)
        ),
      
      -- two conseuctive stops in specific plan must be connected
      -- (Noah)
      stopsAreConnected : Plan >< ConnectionMap -> Bool
      stopsAreConnected(plan, connectionMap) is
        if len plan <= 1
        then true
        else
          let
            (sid, arrt, dept) = hd plan,
            (sid2, arrt2, dept2) = nextStop((sid, arrt, dept), plan)
          in
            if (sid,sid2) isin dom(connectionMap) \/ (sid2, sid) isin dom(connectionMap)
            then stopsAreConnected(tl plan, connectionMap)
            else false
            end
          end
        end,
    
    -- all stops in all plants must exist 
    -- (Noah)
    allStopsInPlanExist : TimeTable >< Net -> Bool
    allStopsInPlanExist(timetable, (capacityMap, connectionMap)) is 
      (all tramid: TramId :- tramid isin dom(timetable) => 
        stopsExist(timetable(tramid), capacityMap)
      ),
    
    -- stops in a specific plan must exist
    -- (Noah)
    stopsExist : Plan >< CapacityMap -> Bool
    stopsExist(plan, capacityMap) is 
      if len plan = 0
      then true
      else
        let
          (sid, arrt, dept) = hd plan
        in
          if sid isin dom(capacityMap)
          then stopsExist(tl plan, capacityMap)
          else false
          end
        end
      end,
 
    -- check that the given timetable is valid
    -- (Sebastian)
     isWellformed : TimeTable >< Net -~-> Bool
     isWellformed(t, n) is
       tramStopsAtAllStopsItPasses(t) /\ timeBetweenDeparturesIsValidHeadway(t, n) /\
       (all plan : Plan :- plan isin rng(t) => timeBetweenStopsIsDrivingTime(plan, n))
 
     
end  
